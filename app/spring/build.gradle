plugins {
    id "org.unbroken-dome.test-sets" version "${testSetsPluginVersion}"
    id "org.springframework.boot" version "2.3.4.RELEASE"
    id "io.spring.dependency-management" version "1.0.10.RELEASE"
    id "com.bmuschko.docker-remote-api" version "6.6.1"
    id "com.avast.gradle.docker-compose" version "0.13.3"
}

import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage

testSets {
    integrationTest
}

configurations {
    compile.exclude module: "slf4j-simple"
}

ext {
    karateVersion = "0.9.6"
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-dependencies:2.3.4.RELEASE'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-hateoas'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    implementation project(":common-dynamo-db")
    implementation project(":identity-json")
    implementation project(":identity-config")
    implementation project(":identity-external-find-stub")
    implementation project(":lockout-json")
    implementation project(":lockout-config")
    implementation project(":context-json")
    implementation project(":context-config")

    testImplementation "org.junit-pioneer:junit-pioneer:${junitPioneerVersion}"
    testImplementation testFixtures(project(":lockout-entities"))
    testImplementation testFixtures(project(":context-entities"))

    integrationTestImplementation "com.intuit.karate:karate-apache:${karateVersion}"
    integrationTestImplementation "com.intuit.karate:karate-junit5:${karateVersion}"
    integrationTestImplementation "org.awaitility:awaitility:${awaitilityVersion}"
    integrationTestImplementation "org.testcontainers:junit-jupiter:1.15.0-rc2"
    integrationTestImplementation "com.amazonaws:aws-java-sdk-dynamodb:${awsSdkVersion}"
}

springBoot {
    buildInfo()
}

bootRun {
    systemProperties = System.getProperties()
    systemProperty "spring.profiles.active", System.properties.getOrDefault("spring.profiles.active", "stubbed")
    systemProperty "server.port", System.properties.getOrDefault("server.port", "8081")
}

integrationTest {
    systemProperty "aws.accessKeyId", "abc"
    systemProperty "aws.secretKey", "123"
}

docker {
    registryCredentials {
        username.set(System.getenv("DOCKER_USERNAME"))
        password.set(System.getenv("DOCKER_PASSWORD"))
    }
}

task buildImage(type: DockerBuildImage) {
    inputDir.set(file('.'))
    images.add('michaelruocco/verification-context-spring-app:latest')
}

task pushImage(type: DockerPushImage) {
    images.set(buildImage.images)
}